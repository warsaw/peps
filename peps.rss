<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>Newest Python PEPs</title>
    <link>https://peps.python.org/peps.rss</link>
    <description>Newest Python Enhancement Proposals (PEPs): Information on new language features and some meta-information like release procedure and schedules.</description>
    <atom:link href="https://peps.python.org/peps.rss" rel="self"/>
    <docs>https://cyber.harvard.edu/rss/rss.html</docs>
    <language>en</language>
    <lastBuildDate>Wed, 10 Apr 2024 21:45:07 GMT</lastBuildDate>
    <item>
      <title>PEP 743: Add Py_COMPAT_API_VERSION to the Python C API</title>
      <link>https://peps.python.org/pep-0743/</link>
      <description>Add Py_COMPAT_API_VERSION and Py_COMPAT_API_VERSION_MAX macros to opt-in for planned incompatible C API changes in a C extension. Maintainers can decide when they make their C extension compatible and also decide which future Python version they want to be compatible with.</description>
      <author>Victor Stinner (vstinner@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0743/</guid>
      <pubDate>Mon, 11 Mar 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 742: Narrowing types with TypeIs</title>
      <link>https://peps.python.org/pep-0742/</link>
      <description>This PEP proposes a new special form, TypeIs, to allow annotating functions that can be used to narrow the type of a value, similar to the builtin isinstance(). Unlike the existing typing.TypeGuard special form, TypeIs can narrow the type in both the if and else branches of a conditional.</description>
      <author>Jelle Zijlstra (jelle.zijlstra@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0742/</guid>
      <pubDate>Wed, 07 Feb 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 741: Python Configuration C API</title>
      <link>https://peps.python.org/pep-0741/</link>
      <description>Add a C API to the limited C API to configure the Python initialization. It can be used with the stable ABI.</description>
      <author>Victor Stinner (vstinner@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0741/</guid>
      <pubDate>Thu, 18 Jan 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 740: Index support for digital attestations</title>
      <link>https://peps.python.org/pep-0740/</link>
      <description>This PEP proposes a collection of changes related to the upload and distribution of digitally signed attestations and metadata used to verify them on a Python package repository, such as PyPI.</description>
      <author>William Woodruff (william@yossarian.net), Facundo Tuesca (facundo.tuesca@trailofbits.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0740/</guid>
      <pubDate>Mon, 08 Jan 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 739: Static description file for build details of Python installations</title>
      <link>https://peps.python.org/pep-0739/</link>
      <description>Introduce a standard format for a static description file with build details of Python installations.</description>
      <author>Filipe La√≠ns (lains@riseup.net)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0739/</guid>
      <pubDate>Tue, 19 Dec 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 738: Adding Android as a supported platform</title>
      <link>https://peps.python.org/pep-0738/</link>
      <description>This PEP proposes adding Android as a supported platform in CPython. The initial goal is for Android to achieve Tier 3 support in Python 3.13.</description>
      <author>Malcolm Smith (smith@chaquo.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0738/</guid>
      <pubDate>Tue, 12 Dec 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 737: C API to format a type fully qualified name</title>
      <link>https://peps.python.org/pep-0737/</link>
      <description>Add new convenient C APIs to format a type fully qualified name. No longer format type names differently depending on how types are implemented.</description>
      <author>Victor Stinner (vstinner@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0737/</guid>
      <pubDate>Wed, 29 Nov 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 736: Shorthand syntax for keyword arguments at invocation</title>
      <link>https://peps.python.org/pep-0736/</link>
      <description>This PEP proposes introducing syntactic sugar f(x=) for the common pattern where a named argument is the same as the name of the variable corresponding to its value f(x=x).</description>
      <author>Joshua Bambrick (jbambrick@google.com), Chris Angelico (rosuav@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0736/</guid>
      <pubDate>Tue, 28 Nov 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 735: Dependency Groups in pyproject.toml</title>
      <link>https://peps.python.org/pep-0735/</link>
      <description>This PEP specifies a mechanism for storing package requirements in pyproject.toml files such that they are not included in any built distribution of the project.</description>
      <author>Stephen Rosen (sirosen0@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0735/</guid>
      <pubDate>Mon, 20 Nov 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 734: Multiple Interpreters in the Stdlib</title>
      <link>https://peps.python.org/pep-0734/</link>
      <description>This PEP proposes to add a new module, interpreters, to support inspecting, creating, and running code in multiple interpreters in the current process.  This includes Interpreter objects that represent the underlying interpreters.  The module will also provide a basic Queue class for communication between interpreters. Finally, we will add a new concurrent.futures.InterpreterPoolExecutor based on the interpreters module.</description>
      <author>Eric Snow (ericsnowcurrently@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0734/</guid>
      <pubDate>Mon, 06 Nov 2023 00:00:00 GMT</pubDate>
    </item>
  </channel>
</rss>
